import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import yaml from 'js-yaml'
import { transformAll } from 'openapi-typescript/dist/transform/index';

const Home: NextPage = () => {
  const [file, setFile] = useState<File | null>(null)
  const [contents, setContents] = useState<any>(null)
  const [tsStr, setTsStr] = useState<string>('')

  useEffect(() => {
    if (!file) return;
    const r = new FileReader();
    r.onload = function(e) { 
      const fileContents = e.target?.result;
      setContents(fileContents)
    }
    r.readAsText(file);
  }, [file])

  useEffect(() => {
    if (!contents) return
    convert(contents)
  }, [contents])

  function parseSchema(schema: any, type: "YAML" | "JSON") {
  if (type === "YAML") {
    try {
      return yaml.load(schema);
    } catch (err: any) {
      throw new Error(`YAML: ${err.toString()}`);
    }
  } else {
    try {
      return JSON.parse(schema);
    } catch (err: any) {
      throw new Error(`JSON: ${err.toString()}`);
    }
  }
}

  const convert = async (contents: string) => {
    const rootTypes = await transformAll(parseSchema(contents, 'YAML'), {
      additionalProperties: false,
      commentHeader: `/**
      * Automatically generated
      **/`,
      defaultNonNullable: false,
      immutableTypes: false,
      contentNever: false,
    makePathsEnum: false,
      rawSchema: false,
    version: 3
    })
    console.log(rootTypes)
    let output = ``
    for (const k of Object.keys(rootTypes)) {
      if (typeof rootTypes[k] === "string") {
        output += `export type ${k} = {\n  ${rootTypes[k]}\n}\n\n`;
      }
    }
    setTsStr(output)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <label>
          Select file
          <input type="file" onChange={(e) => setFile(e.target.files && e.target.files[0])} />
        </label>

        <div style={{ display: 'flex' }}>
          <div style={{ whiteSpace: 'pre-wrap' }}>
            {contents}
          </div>

          <div style={{ whiteSpace: 'pre-wrap' }}>
            {tsStr}
          </div>
        </div>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
