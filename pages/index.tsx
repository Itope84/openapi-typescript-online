import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
// @ts-ignore
import yaml from 'js-yaml'
import { transformAll } from 'openapi-typescript/dist/transform/index';
//@ts-ignore
import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';
//@ts-ignore
import typescript from 'react-syntax-highlighter/dist/cjs/languages/prism/typescript';
//@ts-ignore
import prismYaml from 'react-syntax-highlighter/dist/cjs/languages/prism/yaml';
//@ts-ignore
import {dark} from 'react-syntax-highlighter/dist/cjs/styles/prism';

SyntaxHighlighter.registerLanguage('typescript', typescript);
SyntaxHighlighter.registerLanguage('yaml', prismYaml);

const Home: NextPage = () => {
  const [file, setFile] = useState<File | null>(null)
  const [contents, setContents] = useState<any>(null)
  const [tsStr, setTsStr] = useState<string>('')

  useEffect(() => {
    if (!file) return;
    const r = new FileReader();
    r.onload = function(e) { 
      const fileContents = e.target?.result;
      setContents(fileContents)
    }
    r.readAsText(file);
  }, [file])

  useEffect(() => {
    if (!contents) return
    convert(contents)
  }, [contents])

  function parseSchema(schema: any, type: "YAML" | "JSON") {
  if (type === "YAML") {
    try {
      return yaml.load(schema);
    } catch (err: any) {
      throw new Error(`YAML: ${err.toString()}`);
    }
  } else {
    try {
      return JSON.parse(schema);
    } catch (err: any) {
      throw new Error(`JSON: ${err.toString()}`);
    }
  }
}

  const convert = async (contents: string) => {
    const rootTypes = await transformAll(parseSchema(contents, 'YAML'), {
      additionalProperties: false,
      commentHeader: `/**
      * Automatically generated
      **/`,
      defaultNonNullable: false,
      immutableTypes: false,
      contentNever: false,
    makePathsEnum: false,
      rawSchema: false,
    version: 3
    })
    console.log(rootTypes)
    let output = ``
    for (const k of Object.keys(rootTypes)) {
      if (typeof rootTypes[k] === "string") {
        output += `export type ${k} = {\n  ${rootTypes[k]}\n}\n\n`;
      }
    }
    setTsStr(output)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        <label>
          Select file
          <input type="file" onChange={(e) => setFile(e.target.files && e.target.files[0])} />
        </label>

        <div style={{ display: 'flex', width: '100vw' }}>
          <div style={{ flex: 1, maxWidth: '50%', maxHeight: '800px', overflow: 'auto' }}>
            <SyntaxHighlighter language="yaml" style={dark}>
              {contents}
            </SyntaxHighlighter>
          </div>

          <div style={{ flex: 1, maxWidth: '50%', maxHeight: '800px', overflow: 'auto' }}>
            <SyntaxHighlighter language="typescript" style={dark}>
              {tsStr}
            </SyntaxHighlighter>
          </div>
        </div>
      </main>

    </div>
  )
}

export default Home
